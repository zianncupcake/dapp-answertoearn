"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./services/blockchain.ts":
/*!********************************!*\
  !*** ./services/blockchain.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"checkWallet\": function() { return /* binding */ checkWallet; },\n/* harmony export */   \"connectWallet\": function() { return /* binding */ connectWallet; },\n/* harmony export */   \"createAnswer\": function() { return /* binding */ createAnswer; },\n/* harmony export */   \"createQuestion\": function() { return /* binding */ createQuestion; },\n/* harmony export */   \"deleteQuestion\": function() { return /* binding */ deleteQuestion; },\n/* harmony export */   \"getAnswers\": function() { return /* binding */ getAnswers; },\n/* harmony export */   \"getQuestion\": function() { return /* binding */ getQuestion; },\n/* harmony export */   \"getQuestions\": function() { return /* binding */ getQuestions; },\n/* harmony export */   \"loadData\": function() { return /* binding */ loadData; },\n/* harmony export */   \"payWinner\": function() { return /* binding */ payWinner; },\n/* harmony export */   \"updateQuestion\": function() { return /* binding */ updateQuestion; }\n/* harmony export */ });\n/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/store */ \"./store/index.ts\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _store_globalSlices__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/store/globalSlices */ \"./store/globalSlices.ts\");\n/* harmony import */ var _artifacts_contractAddress_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/artifacts/contractAddress.json */ \"./artifacts/contractAddress.json\");\n/* harmony import */ var _artifacts_contracts_AnswerToEarn_sol_AnswerToEarn_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/artifacts/contracts/AnswerToEarn.sol/AnswerToEarn.json */ \"./artifacts/contracts/AnswerToEarn.sol/AnswerToEarn.json\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/process/browser.js\");\n\n\n\n\n\nconst { setWallet , setAnswers , setQuestion , setQuestions  } = _store_globalSlices__WEBPACK_IMPORTED_MODULE_1__.globalActions;\nconst ContractAddress = _artifacts_contractAddress_json__WEBPACK_IMPORTED_MODULE_2__.address //address contains the ethereum address where sc is deployed\n;\nconst ContractAbi = _artifacts_contracts_AnswerToEarn_sol_AnswerToEarn_json__WEBPACK_IMPORTED_MODULE_3__.abi //abi descrives the interface of smart contract. includes info about functions, names, inputs / types, includes info about the contract itself\n;\nlet ethereum;\nlet tx;\nif (true) {\n    ethereum = window.ethereum;\n}\nconst toWei = (num)=>ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.parseEther(num.toString());\nconst fromWei = (num)=>ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(num);\nconst getEthereumContract = async ()=>{\n    var _ethereum_request;\n    const accounts = await (ethereum === null || ethereum === void 0 ? void 0 : (_ethereum_request = ethereum.request) === null || _ethereum_request === void 0 ? void 0 : _ethereum_request.call(ethereum, {\n        method: \"eth_accounts\"\n    }));\n    const provider = (accounts === null || accounts === void 0 ? void 0 : accounts[0]) ? new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.providers.Web3Provider(ethereum) : new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.providers.JsonRpcProvider(process.env.NEXT_APP_RPC_URL);\n    //if there is an account available the wallet is set to null because dont need to create a new wallet\n    const wallet = (accounts === null || accounts === void 0 ? void 0 : accounts[0]) ? null : ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.Wallet.createRandom();\n    const signer = provider.getSigner((accounts === null || accounts === void 0 ? void 0 : accounts[0]) ? undefined : wallet === null || wallet === void 0 ? void 0 : wallet.address);\n    const contract = new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.Contract(ContractAddress, ContractAbi, signer);\n    return contract;\n};\nconst connectWallet = async ()=>{\n    try {\n        var _ethereum_request;\n        if (!ethereum) return reportError(\"Please install Metamask\");\n        //request user accounts from metamask. dapp request access to user's ethereum accounts\n        const accounts = await ((_ethereum_request = ethereum.request) === null || _ethereum_request === void 0 ? void 0 : _ethereum_request.call(ethereum, {\n            method: \"eth_requestAccounts\"\n        }));\n        _store__WEBPACK_IMPORTED_MODULE_0__.store.dispatch(setWallet(accounts === null || accounts === void 0 ? void 0 : accounts[0])) // wallet address stored. access first account in array\n        ;\n    } catch (error) {\n        reportError(error);\n    }\n};\nconst checkWallet = async ()=>{\n    try {\n        var _ethereum_request;\n        if (!ethereum) return reportError(\"Please install Metamask\");\n        const accounts = await ((_ethereum_request = ethereum.request) === null || _ethereum_request === void 0 ? void 0 : _ethereum_request.call(ethereum, {\n            method: \"eth_accounts\"\n        }));\n        // monitor chain change\n        ethereum.on(\"chainChanged\", ()=>{\n            window.location.reload();\n        });\n        ethereum.on(\"accountsChanged\", async ()=>{\n            _store__WEBPACK_IMPORTED_MODULE_0__.store.dispatch(setWallet(accounts === null || accounts === void 0 ? void 0 : accounts[0]));\n            await checkWallet();\n        });\n        if (accounts === null || accounts === void 0 ? void 0 : accounts.length) {\n            _store__WEBPACK_IMPORTED_MODULE_0__.store.dispatch(setWallet(accounts[0]));\n        } else {\n            _store__WEBPACK_IMPORTED_MODULE_0__.store.dispatch(setWallet(\"\"));\n            reportError(\"Please connect wallet, no accounts found.\");\n        }\n    } catch (error) {\n        reportError(error);\n    }\n};\nconst getQuestions = async ()=>{\n    const contract = await getEthereumContract();\n    const questions = await contract.getQuestions();\n    return structureQuestions(questions);\n};\nconst getQuestion = async (id)=>{\n    const contract = await getEthereumContract();\n    const question = await contract.getQuestion(id);\n    return structureQuestions([\n        question\n    ])[0];\n};\nconst createQuestion = async (data)=>{\n    if (!ethereum) {\n        reportError(\"Please install Metamask\");\n        return Promise.reject(new Error(\"Metamask not installed\"));\n    }\n    try {\n        const contract = await getEthereumContract();\n        console.log(\"THE CONTRACT\", contract);\n        const { title , description , tags , prize  } = data;\n        console.log(\"THE DATA\", data);\n        tx = await contract.createQuestion(title, description, tags, {\n            value: toWei(Number(prize))\n        });\n        console.log(\"tx\", tx);\n        await tx.wait();\n        console.log(\"tx\", tx);\n        const questions = await getQuestions();\n        console.log(\"QUESTIONS\", questions);\n        _store__WEBPACK_IMPORTED_MODULE_0__.store.dispatch(setQuestions(questions));\n        return Promise.resolve(tx);\n    } catch (error) {\n        reportError(error);\n        return Promise.reject(error);\n    }\n};\nconst updateQuestion = async (id, data)=>{\n    if (!ethereum) {\n        reportError(\"Please install Metamask\");\n        return Promise.reject(new Error(\"Metamask not installed\"));\n    }\n    try {\n        const contract = await getEthereumContract();\n        const { title , description , tags  } = data;\n        const tx = await contract.updateQuestion(id, title, description, tags);\n        await tx.wait();\n        const question = await getQuestion(id);\n        _store__WEBPACK_IMPORTED_MODULE_0__.store.dispatch(setQuestion(question));\n        return Promise.resolve(tx);\n    } catch (error) {\n        reportError(error);\n        return Promise.reject(error);\n    }\n};\nconst deleteQuestion = async (id)=>{\n    if (!ethereum) {\n        reportError(\"Please install Metamask\");\n        return Promise.reject(new Error(\"Metamask not installed\"));\n    }\n    try {\n        const contract = await getEthereumContract();\n        const tx = await contract.deleteQuestion(id);\n        await tx.wait();\n        const question = await getQuestion(id);\n        _store__WEBPACK_IMPORTED_MODULE_0__.store.dispatch(setQuestion(question));\n        return Promise.resolve(tx);\n    } catch (error) {\n        reportError(error);\n        return Promise.reject(error);\n    }\n};\nconst createAnswer = async (id, answer)=>{\n    if (!ethereum) {\n        reportError(\"Please install Metamask\");\n        return Promise.reject(new Error(\"Metamask not installed\"));\n    }\n    try {\n        const contract = await getEthereumContract();\n        const tx = await contract.addAnswer(id, answer);\n        await tx.wait();\n        const question = await getQuestion(id);\n        const answers = await getAnswers(id);\n        _store__WEBPACK_IMPORTED_MODULE_0__.store.dispatch(setQuestion(question));\n        _store__WEBPACK_IMPORTED_MODULE_0__.store.dispatch(setAnswers(answers));\n        return Promise.resolve(tx);\n    } catch (error) {\n        reportError(error);\n        return Promise.reject(error);\n    }\n};\nconst payWinner = async (qid, id)=>{\n    if (!ethereum) {\n        reportError(\"Please install Metamask\");\n        return Promise.reject(new Error(\"Metamask not installed\"));\n    }\n    try {\n        const contract = await getEthereumContract();\n        const tx = await contract.payWinner(qid, id);\n        await tx.wait();\n        const question = await getQuestion(id);\n        const answers = await getAnswers(id);\n        _store__WEBPACK_IMPORTED_MODULE_0__.store.dispatch(setQuestion(question));\n        _store__WEBPACK_IMPORTED_MODULE_0__.store.dispatch(setAnswers(answers));\n        return Promise.resolve(tx);\n    } catch (error) {\n        reportError(error);\n        return Promise.reject(error);\n    }\n};\nconst getAnswers = async (id)=>{\n    const contract = await getEthereumContract();\n    const answers = await contract.getAnswers(id);\n    return structureAnswers(answers) || [];\n};\nconst loadData = async ()=>{\n    await getQuestions();\n};\nconst reportError = (error)=>{\n    console.log(error);\n};\nconst structureQuestions = (questions)=>questions.map((question)=>({\n            id: Number(question.id),\n            title: question.title,\n            description: question.description,\n            owner: question.owner.toLowerCase(),\n            winner: question.winner.toLowerCase(),\n            paidout: question.paidout,\n            deleted: question.deleted,\n            updated: Number(question.updated),\n            created: Number(question.created),\n            answers: Number(question.answers),\n            tags: question.tags.split(\",\").map((tag)=>tag.trim()),\n            prize: fromWei(question.prize)\n        })).sort((a, b)=>b.created - a.created);\nconst structureAnswers = (answers)=>answers.map((answer)=>({\n            id: Number(answer.id),\n            qid: Number(answer.qid),\n            comment: answer.comment,\n            owner: answer.owner.toLowerCase(),\n            deleted: answer.deleted,\n            created: Number(answer.created),\n            updated: Number(answer.updated)\n        })).sort((a, b)=>b.updated - a.updated);\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEdBQUcsQ0FBQyxDQUFDUixTQUFZO1lBQ2hCcEIsSUFBSWMsT0FBT00sT0FBT3BCLEVBQUU7WUFDcEJ5QixLQUFLWCxPQUFPTSxPQUFPSyxHQUFHO1lBQ3RCaUIsU0FBU3RCLE9BQU9zQixPQUFPO1lBQ3ZCYixPQUFPVCxPQUFPUyxLQUFLLENBQUNDLFdBQVc7WUFDL0JHLFNBQVNiLE9BQU9hLE9BQU87WUFDdkJFLFNBQVNyQixPQUFPTSxPQUFPZSxPQUFPO1lBQzlCRCxTQUFTcEIsT0FBT00sT0FBT2MsT0FBTztRQUNoQyxJQUNDSyxJQUFJLENBQUMsQ0FBQ0MsR0FBR0MsSUFBTUEsRUFBRVAsT0FBTyxHQUFHTSxFQUFFTixPQUFPO0FBY3hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NlcnZpY2VzL2Jsb2NrY2hhaW4udHM/OWQ3NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdG9yZSB9IGZyb20gJ0Avc3RvcmUnXG5pbXBvcnQgeyBldGhlcnMgfSBmcm9tICdldGhlcnMnXG5pbXBvcnQgeyBnbG9iYWxBY3Rpb25zIH0gZnJvbSAnQC9zdG9yZS9nbG9iYWxTbGljZXMnXG5pbXBvcnQgYWRkcmVzcyBmcm9tICdAL2FydGlmYWN0cy9jb250cmFjdEFkZHJlc3MuanNvbidcbmltcG9ydCBhYmkgZnJvbSAnQC9hcnRpZmFjdHMvY29udHJhY3RzL0Fuc3dlclRvRWFybi5zb2wvQW5zd2VyVG9FYXJuLmpzb24nXG5pbXBvcnQgeyBBbnN3ZXJQcm9wLCBRdWVzdGlvblBhcmFtcywgUXVlc3Rpb25Qcm9wIH0gZnJvbSAnQC91dGlscy9pbnRlcmZhY2VzJ1xuXG5jb25zdCB7IHNldFdhbGxldCwgc2V0QW5zd2Vycywgc2V0UXVlc3Rpb24sIHNldFF1ZXN0aW9ucyB9ID0gZ2xvYmFsQWN0aW9uc1xuY29uc3QgQ29udHJhY3RBZGRyZXNzID0gYWRkcmVzcy5hZGRyZXNzIC8vYWRkcmVzcyBjb250YWlucyB0aGUgZXRoZXJldW0gYWRkcmVzcyB3aGVyZSBzYyBpcyBkZXBsb3llZFxuY29uc3QgQ29udHJhY3RBYmkgPSBhYmkuYWJpIC8vYWJpIGRlc2NyaXZlcyB0aGUgaW50ZXJmYWNlIG9mIHNtYXJ0IGNvbnRyYWN0LiBpbmNsdWRlcyBpbmZvIGFib3V0IGZ1bmN0aW9ucywgbmFtZXMsIGlucHV0cyAvIHR5cGVzLCBpbmNsdWRlcyBpbmZvIGFib3V0IHRoZSBjb250cmFjdCBpdHNlbGZcbmxldCBldGhlcmV1bTogYW55XG5sZXQgdHg6IGFueVxuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgZXRoZXJldW0gPSAod2luZG93IGFzIGFueSkuZXRoZXJldW1cbn1cblxuY29uc3QgdG9XZWkgPSAobnVtOiBudW1iZXIpID0+IGV0aGVycy51dGlscy5wYXJzZUV0aGVyKG51bS50b1N0cmluZygpKVxuY29uc3QgZnJvbVdlaSA9IChudW06IG51bWJlcikgPT4gZXRoZXJzLnV0aWxzLmZvcm1hdEV0aGVyKG51bSlcblxuY29uc3QgZ2V0RXRoZXJldW1Db250cmFjdCA9IGFzeW5jICgpID0+IHtcbiAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCBldGhlcmV1bT8ucmVxdWVzdD8uKHsgbWV0aG9kOiAnZXRoX2FjY291bnRzJyB9KVxuICBjb25zdCBwcm92aWRlciA9IGFjY291bnRzPy5bMF1cbiAgLy9UaGUgZXRoZXJzLnByb3ZpZGVycy5XZWIzUHJvdmlkZXIgaXMgYSBjbGFzcyBmcm9tIHRoZSBldGhlcnMuanMgbGlicmFyeSwgd2hpY2ggcHJvdmlkZXMgYSBjb252ZW5pZW50IHdheSB0byBpbnRlcmFjdCB3aXRoIHRoZSBFdGhlcmV1bSBibG9ja2NoYWluIHZpYSB0aGUgZXRoZXJldW0gcHJvdmlkZXIuXG4gICAgPyBuZXcgZXRoZXJzLnByb3ZpZGVycy5XZWIzUHJvdmlkZXIoZXRoZXJldW0pXG4gIC8vQSBKc29uUnBjUHJvdmlkZXIgaXMgYSBwcm92aWRlciBmcm9tIHRoZSBldGhlcnMuanMgbGlicmFyeSB0aGF0IGNvbm5lY3RzIHRvIGFuIEV0aGVyZXVtIG5vZGUgdmlhIEpTT04tUlBDIChKYXZhU2NyaXB0IE9iamVjdCBOb3RhdGlvbiAtIFJlbW90ZSBQcm9jZWR1cmUgQ2FsbCkuIFRoaXMgaXMgYSBwcm90b2NvbCB1c2VkIHRvIGNvbW11bmljYXRlIHdpdGggRXRoZXJldW0gbm9kZXMsIGFsbG93aW5nIGNsaWVudHMgdG8gcGVyZm9ybSB2YXJpb3VzIGFjdGlvbnMgb24gdGhlIGJsb2NrY2hhaW4sIHN1Y2ggYXMgcmVhZGluZyBkYXRhLCBzZW5kaW5nIHRyYW5zYWN0aW9ucywgYW5kIHF1ZXJ5aW5nIHRoZSBzdGF0ZS5cbiAgLy9FdmVuIGlmIG5vIHVzZXIgYWNjb3VudHMgYXJlIGF2YWlsYWJsZSwgeW91ciBhcHBsaWNhdGlvbiBtaWdodCBzdGlsbCBuZWVkIHRvIGludGVyYWN0IHdpdGggdGhlIEV0aGVyZXVtIG5ldHdvcmsuIEEgSnNvblJwY1Byb3ZpZGVyIGFsbG93cyB5b3UgdG8gZG8gdGhpcyBieSBjb25uZWN0aW5nIHRvIGEgcmVtb3RlIEV0aGVyZXVtIG5vZGUuXG4gIC8vWW91IGNhbiBzdGlsbCByZWFkIGRhdGEgZnJvbSB0aGUgYmxvY2tjaGFpbiB3aXRob3V0IG5lZWRpbmcgYSB1c2VyIGFjY291bnQuIEZvciBleGFtcGxlLCB5b3UgbWlnaHQgd2FudCB0byBkaXNwbGF5IGluZm9ybWF0aW9uIGFib3V0IHRva2VucywgY29udHJhY3RzLCBvciByZWNlbnQgdHJhbnNhY3Rpb25zLlxuICAgIDogbmV3IGV0aGVycy5wcm92aWRlcnMuSnNvblJwY1Byb3ZpZGVyKHByb2Nlc3MuZW52Lk5FWFRfQVBQX1JQQ19VUkwpXG4gIC8vaWYgdGhlcmUgaXMgYW4gYWNjb3VudCBhdmFpbGFibGUgdGhlIHdhbGxldCBpcyBzZXQgdG8gbnVsbCBiZWNhdXNlIGRvbnQgbmVlZCB0byBjcmVhdGUgYSBuZXcgd2FsbGV0XG4gIGNvbnN0IHdhbGxldCA9IGFjY291bnRzPy5bMF0gPyBudWxsIDogZXRoZXJzLldhbGxldC5jcmVhdGVSYW5kb20oKVxuICBjb25zdCBzaWduZXIgPSBwcm92aWRlci5nZXRTaWduZXIoYWNjb3VudHM/LlswXSA/IHVuZGVmaW5lZCA6IHdhbGxldD8uYWRkcmVzcylcblxuICBjb25zdCBjb250cmFjdCA9IG5ldyBldGhlcnMuQ29udHJhY3QoQ29udHJhY3RBZGRyZXNzLCBDb250cmFjdEFiaSwgc2lnbmVyKVxuICByZXR1cm4gY29udHJhY3Rcbn1cblxuY29uc3QgY29ubmVjdFdhbGxldCA9IGFzeW5jICgpID0+IHtcbiAgdHJ5IHtcbiAgICBpZiAoIWV0aGVyZXVtKSByZXR1cm4gcmVwb3J0RXJyb3IoJ1BsZWFzZSBpbnN0YWxsIE1ldGFtYXNrJylcbiAgICAvL3JlcXVlc3QgdXNlciBhY2NvdW50cyBmcm9tIG1ldGFtYXNrLiBkYXBwIHJlcXVlc3QgYWNjZXNzIHRvIHVzZXIncyBldGhlcmV1bSBhY2NvdW50c1xuXG4gICAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCBldGhlcmV1bS5yZXF1ZXN0Py4oeyBtZXRob2Q6ICdldGhfcmVxdWVzdEFjY291bnRzJyB9KVxuICAgIHN0b3JlLmRpc3BhdGNoKHNldFdhbGxldChhY2NvdW50cz8uWzBdKSkgLy8gd2FsbGV0IGFkZHJlc3Mgc3RvcmVkLiBhY2Nlc3MgZmlyc3QgYWNjb3VudCBpbiBhcnJheVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlcG9ydEVycm9yKGVycm9yKVxuICB9XG59XG5cbmNvbnN0IGNoZWNrV2FsbGV0ID0gYXN5bmMgKCkgPT4ge1xuICB0cnkge1xuICAgIGlmICghZXRoZXJldW0pIHJldHVybiByZXBvcnRFcnJvcignUGxlYXNlIGluc3RhbGwgTWV0YW1hc2snKVxuICAgIGNvbnN0IGFjY291bnRzID0gYXdhaXQgZXRoZXJldW0ucmVxdWVzdD8uKHsgbWV0aG9kOiAnZXRoX2FjY291bnRzJyB9KVxuXG4gICAgLy8gbW9uaXRvciBjaGFpbiBjaGFuZ2VcbiAgICBldGhlcmV1bS5vbignY2hhaW5DaGFuZ2VkJywgKCkgPT4ge1xuICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpXG4gICAgfSlcblxuICAgIGV0aGVyZXVtLm9uKCdhY2NvdW50c0NoYW5nZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBzdG9yZS5kaXNwYXRjaChzZXRXYWxsZXQoYWNjb3VudHM/LlswXSkpXG4gICAgICBhd2FpdCBjaGVja1dhbGxldCgpXG4gICAgfSlcblxuICAgIGlmIChhY2NvdW50cz8ubGVuZ3RoKSB7XG4gICAgICBzdG9yZS5kaXNwYXRjaChzZXRXYWxsZXQoYWNjb3VudHNbMF0pKVxuICAgIH0gZWxzZSB7XG4gICAgICBzdG9yZS5kaXNwYXRjaChzZXRXYWxsZXQoJycpKVxuICAgICAgcmVwb3J0RXJyb3IoJ1BsZWFzZSBjb25uZWN0IHdhbGxldCwgbm8gYWNjb3VudHMgZm91bmQuJylcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVwb3J0RXJyb3IoZXJyb3IpXG4gIH1cbn1cblxuY29uc3QgZ2V0UXVlc3Rpb25zID0gYXN5bmMgKCk6IFByb21pc2U8UXVlc3Rpb25Qcm9wW10+ID0+IHtcbiAgY29uc3QgY29udHJhY3QgPSBhd2FpdCBnZXRFdGhlcmV1bUNvbnRyYWN0KClcbiAgY29uc3QgcXVlc3Rpb25zID0gYXdhaXQgY29udHJhY3QuZ2V0UXVlc3Rpb25zKClcbiAgcmV0dXJuIHN0cnVjdHVyZVF1ZXN0aW9ucyhxdWVzdGlvbnMpXG59XG5cbmNvbnN0IGdldFF1ZXN0aW9uID0gYXN5bmMgKGlkOiBudW1iZXIpOiBQcm9taXNlPFF1ZXN0aW9uUHJvcD4gPT4ge1xuICBjb25zdCBjb250cmFjdCA9IGF3YWl0IGdldEV0aGVyZXVtQ29udHJhY3QoKVxuICBjb25zdCBxdWVzdGlvbiA9IGF3YWl0IGNvbnRyYWN0LmdldFF1ZXN0aW9uKGlkKVxuICByZXR1cm4gc3RydWN0dXJlUXVlc3Rpb25zKFtxdWVzdGlvbl0pWzBdXG59XG5cbmNvbnN0IGNyZWF0ZVF1ZXN0aW9uID0gYXN5bmMgKGRhdGE6IFF1ZXN0aW9uUGFyYW1zKSA9PiB7XG4gIGlmICghZXRoZXJldW0pIHtcbiAgICByZXBvcnRFcnJvcignUGxlYXNlIGluc3RhbGwgTWV0YW1hc2snKVxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ01ldGFtYXNrIG5vdCBpbnN0YWxsZWQnKSlcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgY29udHJhY3QgPSBhd2FpdCBnZXRFdGhlcmV1bUNvbnRyYWN0KClcbiAgICBjb25zb2xlLmxvZyhcIlRIRSBDT05UUkFDVFwiLCBjb250cmFjdClcbiAgICBjb25zdCB7IHRpdGxlLCBkZXNjcmlwdGlvbiwgdGFncywgcHJpemUgfSA9IGRhdGFcbiAgICBjb25zb2xlLmxvZyhcIlRIRSBEQVRBXCIsIGRhdGEpXG4gICAgdHggPSBhd2FpdCBjb250cmFjdC5jcmVhdGVRdWVzdGlvbih0aXRsZSwgZGVzY3JpcHRpb24sIHRhZ3MsIHtcbiAgICAgIHZhbHVlOiB0b1dlaShOdW1iZXIocHJpemUpKSxcbiAgICB9KVxuICAgIGNvbnNvbGUubG9nKFwidHhcIiwgdHgpXG5cblxuICAgIGF3YWl0IHR4LndhaXQoKVxuICAgIGNvbnNvbGUubG9nKFwidHhcIiwgdHgpXG4gICAgY29uc3QgcXVlc3Rpb25zID0gYXdhaXQgZ2V0UXVlc3Rpb25zKClcbiAgICBjb25zb2xlLmxvZyhcIlFVRVNUSU9OU1wiLCBxdWVzdGlvbnMpXG5cbiAgICBzdG9yZS5kaXNwYXRjaChzZXRRdWVzdGlvbnMocXVlc3Rpb25zKSlcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHR4KVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlcG9ydEVycm9yKGVycm9yKVxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcilcbiAgfVxufVxuXG5jb25zdCB1cGRhdGVRdWVzdGlvbiA9IGFzeW5jIChpZDogbnVtYmVyLCBkYXRhOiBRdWVzdGlvblBhcmFtcykgPT4ge1xuICBpZiAoIWV0aGVyZXVtKSB7XG4gICAgcmVwb3J0RXJyb3IoJ1BsZWFzZSBpbnN0YWxsIE1ldGFtYXNrJylcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdNZXRhbWFzayBub3QgaW5zdGFsbGVkJykpXG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IGNvbnRyYWN0ID0gYXdhaXQgZ2V0RXRoZXJldW1Db250cmFjdCgpXG4gICAgY29uc3QgeyB0aXRsZSwgZGVzY3JpcHRpb24sIHRhZ3MgfSA9IGRhdGFcbiAgICBjb25zdCB0eCA9IGF3YWl0IGNvbnRyYWN0LnVwZGF0ZVF1ZXN0aW9uKGlkLCB0aXRsZSwgZGVzY3JpcHRpb24sIHRhZ3MpXG5cbiAgICBhd2FpdCB0eC53YWl0KClcbiAgICBjb25zdCBxdWVzdGlvbiA9IGF3YWl0IGdldFF1ZXN0aW9uKGlkKVxuXG4gICAgc3RvcmUuZGlzcGF0Y2goc2V0UXVlc3Rpb24ocXVlc3Rpb24pKVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHgpXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVwb3J0RXJyb3IoZXJyb3IpXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKVxuICB9XG59XG5cbmNvbnN0IGRlbGV0ZVF1ZXN0aW9uID0gYXN5bmMgKGlkOiBudW1iZXIpID0+IHtcbiAgaWYgKCFldGhlcmV1bSkge1xuICAgIHJlcG9ydEVycm9yKCdQbGVhc2UgaW5zdGFsbCBNZXRhbWFzaycpXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignTWV0YW1hc2sgbm90IGluc3RhbGxlZCcpKVxuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBjb250cmFjdCA9IGF3YWl0IGdldEV0aGVyZXVtQ29udHJhY3QoKVxuICAgIGNvbnN0IHR4ID0gYXdhaXQgY29udHJhY3QuZGVsZXRlUXVlc3Rpb24oaWQpXG5cbiAgICBhd2FpdCB0eC53YWl0KClcbiAgICBjb25zdCBxdWVzdGlvbiA9IGF3YWl0IGdldFF1ZXN0aW9uKGlkKVxuXG4gICAgc3RvcmUuZGlzcGF0Y2goc2V0UXVlc3Rpb24ocXVlc3Rpb24pKVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHgpXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVwb3J0RXJyb3IoZXJyb3IpXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKVxuICB9XG59XG5cbmNvbnN0IGNyZWF0ZUFuc3dlciA9IGFzeW5jIChpZDogbnVtYmVyLCBhbnN3ZXI6IHN0cmluZykgPT4ge1xuICBpZiAoIWV0aGVyZXVtKSB7XG4gICAgcmVwb3J0RXJyb3IoJ1BsZWFzZSBpbnN0YWxsIE1ldGFtYXNrJylcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdNZXRhbWFzayBub3QgaW5zdGFsbGVkJykpXG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IGNvbnRyYWN0ID0gYXdhaXQgZ2V0RXRoZXJldW1Db250cmFjdCgpXG4gICAgY29uc3QgdHggPSBhd2FpdCBjb250cmFjdC5hZGRBbnN3ZXIoaWQsIGFuc3dlcilcblxuICAgIGF3YWl0IHR4LndhaXQoKVxuICAgIGNvbnN0IHF1ZXN0aW9uID0gYXdhaXQgZ2V0UXVlc3Rpb24oaWQpXG4gICAgY29uc3QgYW5zd2VycyA9IGF3YWl0IGdldEFuc3dlcnMoaWQpXG5cbiAgICBzdG9yZS5kaXNwYXRjaChzZXRRdWVzdGlvbihxdWVzdGlvbikpXG4gICAgc3RvcmUuZGlzcGF0Y2goc2V0QW5zd2VycyhhbnN3ZXJzKSlcblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHgpXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVwb3J0RXJyb3IoZXJyb3IpXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKVxuICB9XG59XG5cbmNvbnN0IHBheVdpbm5lciA9IGFzeW5jIChxaWQ6IG51bWJlciwgaWQ6IG51bWJlcikgPT4ge1xuICBpZiAoIWV0aGVyZXVtKSB7XG4gICAgcmVwb3J0RXJyb3IoJ1BsZWFzZSBpbnN0YWxsIE1ldGFtYXNrJylcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdNZXRhbWFzayBub3QgaW5zdGFsbGVkJykpXG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IGNvbnRyYWN0ID0gYXdhaXQgZ2V0RXRoZXJldW1Db250cmFjdCgpXG4gICAgY29uc3QgdHggPSBhd2FpdCBjb250cmFjdC5wYXlXaW5uZXIocWlkLCBpZClcblxuICAgIGF3YWl0IHR4LndhaXQoKVxuICAgIGNvbnN0IHF1ZXN0aW9uID0gYXdhaXQgZ2V0UXVlc3Rpb24oaWQpXG4gICAgY29uc3QgYW5zd2VycyA9IGF3YWl0IGdldEFuc3dlcnMoaWQpXG5cbiAgICBzdG9yZS5kaXNwYXRjaChzZXRRdWVzdGlvbihxdWVzdGlvbikpXG4gICAgc3RvcmUuZGlzcGF0Y2goc2V0QW5zd2VycyhhbnN3ZXJzKSlcblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHgpXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVwb3J0RXJyb3IoZXJyb3IpXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKVxuICB9XG59XG5cbmNvbnN0IGdldEFuc3dlcnMgPSBhc3luYyAoaWQ6IG51bWJlcik6IFByb21pc2U8QW5zd2VyUHJvcFtdPiA9PiB7XG4gIGNvbnN0IGNvbnRyYWN0ID0gYXdhaXQgZ2V0RXRoZXJldW1Db250cmFjdCgpXG4gIGNvbnN0IGFuc3dlcnMgPSBhd2FpdCBjb250cmFjdC5nZXRBbnN3ZXJzKGlkKVxuICByZXR1cm4gc3RydWN0dXJlQW5zd2VycyhhbnN3ZXJzKSB8fCBbXVxufVxuXG5jb25zdCBsb2FkRGF0YSA9IGFzeW5jICgpID0+IHtcbiAgYXdhaXQgZ2V0UXVlc3Rpb25zKClcbn1cblxuY29uc3QgcmVwb3J0RXJyb3IgPSAoZXJyb3I6IGFueSkgPT4ge1xuICBjb25zb2xlLmxvZyhlcnJvcilcbn1cblxuY29uc3Qgc3RydWN0dXJlUXVlc3Rpb25zID0gKHF1ZXN0aW9uczogYW55W10pOiBRdWVzdGlvblByb3BbXSA9PlxuICBxdWVzdGlvbnNcbiAgICAubWFwKChxdWVzdGlvbikgPT4gKHtcbiAgICAgIGlkOiBOdW1iZXIocXVlc3Rpb24uaWQpLFxuICAgICAgdGl0bGU6IHF1ZXN0aW9uLnRpdGxlLFxuICAgICAgZGVzY3JpcHRpb246IHF1ZXN0aW9uLmRlc2NyaXB0aW9uLFxuICAgICAgb3duZXI6IHF1ZXN0aW9uLm93bmVyLnRvTG93ZXJDYXNlKCksXG4gICAgICB3aW5uZXI6IHF1ZXN0aW9uLndpbm5lci50b0xvd2VyQ2FzZSgpLFxuICAgICAgcGFpZG91dDogcXVlc3Rpb24ucGFpZG91dCxcbiAgICAgIGRlbGV0ZWQ6IHF1ZXN0aW9uLmRlbGV0ZWQsXG4gICAgICB1cGRhdGVkOiBOdW1iZXIocXVlc3Rpb24udXBkYXRlZCksXG4gICAgICBjcmVhdGVkOiBOdW1iZXIocXVlc3Rpb24uY3JlYXRlZCksXG4gICAgICBhbnN3ZXJzOiBOdW1iZXIocXVlc3Rpb24uYW5zd2VycyksXG4gICAgICB0YWdzOiBxdWVzdGlvbi50YWdzLnNwbGl0KCcsJykubWFwKCh0YWc6IHN0cmluZykgPT4gdGFnLnRyaW0oKSksXG4gICAgICBwcml6ZTogZnJvbVdlaShxdWVzdGlvbi5wcml6ZSksXG4gICAgfSkpXG4gICAgLnNvcnQoKGEsIGIpID0+IGIuY3JlYXRlZCAtIGEuY3JlYXRlZClcblxuY29uc3Qgc3RydWN0dXJlQW5zd2VycyA9IChhbnN3ZXJzOiBhbnlbXSk6IEFuc3dlclByb3BbXSA9PlxuICBhbnN3ZXJzXG4gICAgLm1hcCgoYW5zd2VyKSA9PiAoe1xuICAgICAgaWQ6IE51bWJlcihhbnN3ZXIuaWQpLFxuICAgICAgcWlkOiBOdW1iZXIoYW5zd2VyLnFpZCksXG4gICAgICBjb21tZW50OiBhbnN3ZXIuY29tbWVudCxcbiAgICAgIG93bmVyOiBhbnN3ZXIub3duZXIudG9Mb3dlckNhc2UoKSxcbiAgICAgIGRlbGV0ZWQ6IGFuc3dlci5kZWxldGVkLFxuICAgICAgY3JlYXRlZDogTnVtYmVyKGFuc3dlci5jcmVhdGVkKSxcbiAgICAgIHVwZGF0ZWQ6IE51bWJlcihhbnN3ZXIudXBkYXRlZCksXG4gICAgfSkpXG4gICAgLnNvcnQoKGEsIGIpID0+IGIudXBkYXRlZCAtIGEudXBkYXRlZClcblxuZXhwb3J0IHtcbiAgY29ubmVjdFdhbGxldCxcbiAgY2hlY2tXYWxsZXQsXG4gIGxvYWREYXRhLFxuICBnZXRRdWVzdGlvbnMsXG4gIGdldFF1ZXN0aW9uLFxuICBjcmVhdGVRdWVzdGlvbixcbiAgdXBkYXRlUXVlc3Rpb24sXG4gIGRlbGV0ZVF1ZXN0aW9uLFxuICBjcmVhdGVBbnN3ZXIsXG4gIGdldEFuc3dlcnMsXG4gIHBheVdpbm5lcixcbn1cbiJdLCJuYW1lcyI6WyJzdG9yZSIsImV0aGVycyIsImdsb2JhbEFjdGlvbnMiLCJhZGRyZXNzIiwiYWJpIiwic2V0V2FsbGV0Iiwic2V0QW5zd2VycyIsInNldFF1ZXN0aW9uIiwic2V0UXVlc3Rpb25zIiwiQ29udHJhY3RBZGRyZXNzIiwiQ29udHJhY3RBYmkiLCJldGhlcmV1bSIsInR4Iiwid2luZG93IiwidG9XZWkiLCJudW0iLCJ1dGlscyIsInBhcnNlRXRoZXIiLCJ0b1N0cmluZyIsImZyb21XZWkiLCJmb3JtYXRFdGhlciIsImdldEV0aGVyZXVtQ29udHJhY3QiLCJhY2NvdW50cyIsInJlcXVlc3QiLCJtZXRob2QiLCJwcm92aWRlciIsInByb3ZpZGVycyIsIldlYjNQcm92aWRlciIsIkpzb25ScGNQcm92aWRlciIsInByb2Nlc3MiLCJlbnYiLCJORVhUX0FQUF9SUENfVVJMIiwid2FsbGV0IiwiV2FsbGV0IiwiY3JlYXRlUmFuZG9tIiwic2lnbmVyIiwiZ2V0U2lnbmVyIiwidW5kZWZpbmVkIiwiY29udHJhY3QiLCJDb250cmFjdCIsImNvbm5lY3RXYWxsZXQiLCJyZXBvcnRFcnJvciIsImRpc3BhdGNoIiwiZXJyb3IiLCJjaGVja1dhbGxldCIsIm9uIiwibG9jYXRpb24iLCJyZWxvYWQiLCJsZW5ndGgiLCJnZXRRdWVzdGlvbnMiLCJxdWVzdGlvbnMiLCJzdHJ1Y3R1cmVRdWVzdGlvbnMiLCJnZXRRdWVzdGlvbiIsImlkIiwicXVlc3Rpb24iLCJjcmVhdGVRdWVzdGlvbiIsImRhdGEiLCJQcm9taXNlIiwicmVqZWN0IiwiRXJyb3IiLCJjb25zb2xlIiwibG9nIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsInRhZ3MiLCJwcml6ZSIsInZhbHVlIiwiTnVtYmVyIiwid2FpdCIsInJlc29sdmUiLCJ1cGRhdGVRdWVzdGlvbiIsImRlbGV0ZVF1ZXN0aW9uIiwiY3JlYXRlQW5zd2VyIiwiYW5zd2VyIiwiYWRkQW5zd2VyIiwiYW5zd2VycyIsImdldEFuc3dlcnMiLCJwYXlXaW5uZXIiLCJxaWQiLCJzdHJ1Y3R1cmVBbnN3ZXJzIiwibG9hZERhdGEiLCJtYXAiLCJvd25lciIsInRvTG93ZXJDYXNlIiwid2lubmVyIiwicGFpZG91dCIsImRlbGV0ZWQiLCJ1cGRhdGVkIiwiY3JlYXRlZCIsInNwbGl0IiwidGFnIiwidHJpbSIsInNvcnQiLCJhIiwiYiIsImNvbW1lbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./services/blockchain.ts\n"));

/***/ })

});