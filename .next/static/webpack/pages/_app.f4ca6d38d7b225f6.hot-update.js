"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./services/blockchain.ts":
/*!********************************!*\
  !*** ./services/blockchain.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"checkWallet\": function() { return /* binding */ checkWallet; },\n/* harmony export */   \"connectWallet\": function() { return /* binding */ connectWallet; },\n/* harmony export */   \"createAnswer\": function() { return /* binding */ createAnswer; },\n/* harmony export */   \"createQuestion\": function() { return /* binding */ createQuestion; },\n/* harmony export */   \"deleteQuestion\": function() { return /* binding */ deleteQuestion; },\n/* harmony export */   \"getAnswers\": function() { return /* binding */ getAnswers; },\n/* harmony export */   \"getQuestion\": function() { return /* binding */ getQuestion; },\n/* harmony export */   \"getQuestions\": function() { return /* binding */ getQuestions; },\n/* harmony export */   \"loadData\": function() { return /* binding */ loadData; },\n/* harmony export */   \"payWinner\": function() { return /* binding */ payWinner; },\n/* harmony export */   \"updateQuestion\": function() { return /* binding */ updateQuestion; }\n/* harmony export */ });\n/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/store */ \"./store/index.ts\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _store_globalSlices__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/store/globalSlices */ \"./store/globalSlices.ts\");\n/* harmony import */ var _artifacts_contractAddress_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/artifacts/contractAddress.json */ \"./artifacts/contractAddress.json\");\n/* harmony import */ var _artifacts_contracts_AnswerToEarn_sol_AnswerToEarn_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/artifacts/contracts/AnswerToEarn.sol/AnswerToEarn.json */ \"./artifacts/contracts/AnswerToEarn.sol/AnswerToEarn.json\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/process/browser.js\");\n\n\n\n\n\nconst { setWallet , setAnswers , setQuestion , setQuestions  } = _store_globalSlices__WEBPACK_IMPORTED_MODULE_1__.globalActions;\nconst ContractAddress = _artifacts_contractAddress_json__WEBPACK_IMPORTED_MODULE_2__.address //address contains the ethereum address where sc is deployed\n;\nconst ContractAbi = _artifacts_contracts_AnswerToEarn_sol_AnswerToEarn_json__WEBPACK_IMPORTED_MODULE_3__.abi //abi descrives the interface of smart contract. includes info about functions, names, inputs / types, includes info about the contract itself\n;\nlet ethereum;\nlet tx;\nif (true) {\n    ethereum = window.ethereum;\n}\nconst toWei = (num)=>ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.parseEther(num.toString());\nconst fromWei = (num)=>ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(num);\nconst getEthereumContract = async ()=>{\n    var _ethereum_request;\n    const accounts = await (ethereum === null || ethereum === void 0 ? void 0 : (_ethereum_request = ethereum.request) === null || _ethereum_request === void 0 ? void 0 : _ethereum_request.call(ethereum, {\n        method: \"eth_accounts\"\n    }));\n    const provider = (accounts === null || accounts === void 0 ? void 0 : accounts[0]) ? new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.providers.Web3Provider(ethereum) : new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.providers.JsonRpcProvider(process.env.NEXT_APP_RPC_URL);\n    //if there is an account available the wallet is set to null because dont need to create a new wallet\n    const wallet = (accounts === null || accounts === void 0 ? void 0 : accounts[0]) ? null : ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.Wallet.createRandom();\n    const signer = provider.getSigner((accounts === null || accounts === void 0 ? void 0 : accounts[0]) ? undefined : wallet === null || wallet === void 0 ? void 0 : wallet.address);\n    const contract = new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.Contract(ContractAddress, ContractAbi, signer);\n    return contract;\n};\nconst connectWallet = async ()=>{\n    try {\n        var _ethereum_request;\n        if (!ethereum) return reportError(\"Please install Metamask\");\n        //request user accounts from metamask. dapp request access to user's ethereum accounts\n        const accounts = await ((_ethereum_request = ethereum.request) === null || _ethereum_request === void 0 ? void 0 : _ethereum_request.call(ethereum, {\n            method: \"eth_requestAccounts\"\n        }));\n        _store__WEBPACK_IMPORTED_MODULE_0__.store.dispatch(setWallet(accounts === null || accounts === void 0 ? void 0 : accounts[0])) // wallet address stored. access first account in array\n        ;\n    } catch (error) {\n        reportError(error);\n    }\n};\nconst checkWallet = async ()=>{\n    try {\n        var _ethereum_request;\n        if (!ethereum) return reportError(\"Please install Metamask\");\n        const accounts = await ((_ethereum_request = ethereum.request) === null || _ethereum_request === void 0 ? void 0 : _ethereum_request.call(ethereum, {\n            method: \"eth_accounts\"\n        }));\n        // monitor chain change\n        ethereum.on(\"chainChanged\", ()=>{\n            window.location.reload();\n        });\n        ethereum.on(\"accountsChanged\", async ()=>{\n            _store__WEBPACK_IMPORTED_MODULE_0__.store.dispatch(setWallet(accounts === null || accounts === void 0 ? void 0 : accounts[0]));\n            await checkWallet();\n        });\n        if (accounts === null || accounts === void 0 ? void 0 : accounts.length) {\n            _store__WEBPACK_IMPORTED_MODULE_0__.store.dispatch(setWallet(accounts[0]));\n        } else {\n            _store__WEBPACK_IMPORTED_MODULE_0__.store.dispatch(setWallet(\"\"));\n            reportError(\"Please connect wallet, no accounts found.\");\n        }\n    } catch (error) {\n        reportError(error);\n    }\n};\nconst getQuestions = async ()=>{\n    const contract = await getEthereumContract();\n    const questions = await contract.getQuestions();\n    return structureQuestions(questions);\n};\nconst getQuestion = async (id)=>{\n    const contract = await getEthereumContract();\n    const question = await contract.getQuestion(id);\n    return structureQuestions([\n        question\n    ])[0];\n};\nconst createQuestion = async (data)=>{\n    if (!ethereum) {\n        reportError(\"Please install Metamask\");\n        return Promise.reject(new Error(\"Metamask not installed\"));\n    }\n    try {\n        const contract = await getEthereumContract();\n        console.log(\"THE CONTRACT\", contract);\n        const { title , description , tags , prize  } = data;\n        console.log(\"THE DATA\", data);\n        tx = await contract.createQuestion(title, description, tags, {\n            value: toWei(Number(prize))\n        });\n        console.log(\"tx\", tx);\n        await tx.wait();\n        console.log(\"tx\", tx);\n        const questions = await getQuestions();\n        console.log(\"QUESTIONS\", questions);\n        _store__WEBPACK_IMPORTED_MODULE_0__.store.dispatch(setQuestions(questions));\n        return Promise.resolve(tx);\n    } catch (error) {\n        reportError(error);\n        return Promise.reject(error);\n    }\n};\nconst updateQuestion = async (id, data)=>{\n    if (!ethereum) {\n        reportError(\"Please install Metamask\");\n        return Promise.reject(new Error(\"Metamask not installed\"));\n    }\n    try {\n        const contract = await getEthereumContract();\n        const { title , description , tags  } = data;\n        tx = await contract.updateQuestion(id, title, description, tags);\n        await tx.wait();\n        const question = await getQuestion(id);\n        _store__WEBPACK_IMPORTED_MODULE_0__.store.dispatch(setQuestion(question));\n        return Promise.resolve(tx);\n    } catch (error) {\n        reportError(error);\n        return Promise.reject(error);\n    }\n};\nconst deleteQuestion = async (id)=>{\n    if (!ethereum) {\n        reportError(\"Please install Metamask\");\n        return Promise.reject(new Error(\"Metamask not installed\"));\n    }\n    try {\n        const contract = await getEthereumContract();\n        tx = await contract.deleteQuestion(id);\n        await tx.wait();\n        const question = await getQuestion(id);\n        _store__WEBPACK_IMPORTED_MODULE_0__.store.dispatch(setQuestion(question));\n        return Promise.resolve(tx);\n    } catch (error) {\n        reportError(error);\n        return Promise.reject(error);\n    }\n};\nconst createAnswer = async (id, answer)=>{\n    if (!ethereum) {\n        reportError(\"Please install Metamask\");\n        return Promise.reject(new Error(\"Metamask not installed\"));\n    }\n    try {\n        const contract = await getEthereumContract();\n        tx = await contract.addAnswer(id, answer);\n        await tx.wait();\n        const question = await getQuestion(id);\n        const answers = await getAnswers(id);\n        _store__WEBPACK_IMPORTED_MODULE_0__.store.dispatch(setQuestion(question));\n        _store__WEBPACK_IMPORTED_MODULE_0__.store.dispatch(setAnswers(answers));\n        return Promise.resolve(tx);\n    } catch (error) {\n        reportError(error);\n        return Promise.reject(error);\n    }\n};\nconst payWinner = async (qid, id)=>{\n    if (!ethereum) {\n        reportError(\"Please install Metamask\");\n        return Promise.reject(new Error(\"Metamask not installed\"));\n    }\n    try {\n        const contract = await getEthereumContract();\n        tx = await contract.payWinner(qid, id);\n        await tx.wait();\n        const question = await getQuestion(id);\n        const answers = await getAnswers(id);\n        _store__WEBPACK_IMPORTED_MODULE_0__.store.dispatch(setQuestion(question));\n        _store__WEBPACK_IMPORTED_MODULE_0__.store.dispatch(setAnswers(answers));\n        return Promise.resolve(tx);\n    } catch (error) {\n        reportError(error);\n        return Promise.reject(error);\n    }\n};\nconst getAnswers = async (id)=>{\n    const contract = await getEthereumContract();\n    const answers = await contract.getAnswers(id);\n    return structureAnswers(answers) || [];\n};\nconst loadData = async ()=>{\n    await getQuestions();\n};\nconst reportError = (error)=>{\n    console.log(error);\n};\nconst structureQuestions = (questions)=>questions.map((question)=>({\n            id: Number(question.id),\n            title: question.title,\n            description: question.description,\n            owner: question.owner.toLowerCase(),\n            winner: question.winner.toLowerCase(),\n            paidout: question.paidout,\n            deleted: question.deleted,\n            updated: Number(question.updated),\n            created: Number(question.created),\n            answers: Number(question.answers),\n            tags: question.tags.split(\",\").map((tag)=>tag.trim()),\n            prize: fromWei(question.prize)\n        })).sort((a, b)=>b.created - a.created);\nconst structureAnswers = (answers)=>answers.map((answer)=>({\n            id: Number(answer.id),\n            qid: Number(answer.qid),\n            comment: answer.comment,\n            owner: answer.owner.toLowerCase(),\n            deleted: answer.deleted,\n            created: Number(answer.created),\n            updated: Number(answer.updated)\n        })).sort((a, b)=>b.updated - a.updated);\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./services/blockchain.ts\n"));

/***/ })

});